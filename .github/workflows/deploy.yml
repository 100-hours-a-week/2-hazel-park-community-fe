name: Build and Deploy Backend

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리의 코드를 가져옵니다.
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명을 설정하여 ECR, S3, Elastic Beanstalk에 접근할 수 있도록 구성합니다.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. Amazon ECR에 로그인하여 Docker 이미지를 푸시할 수 있도록 인증합니다.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Docker Buildx 설치 및 활성화
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 5. 프론트엔드 Docker 이미지를 빌드하고 Amazon ECR에 푸시합니다.
      - name: Build and Push Frontend Docker Image
        run: |
          docker buildx build --platform linux/arm64,linux/amd64 \
            -t ${{ secrets.ECR_FRONTEND_URI }}:${{ github.sha }} \
            --push .

      # 6. S3에서 Backend SHA 파일(sha.txt)을 다운로드하여 해당 태그를 환경 변수로 설정합니다.
      - name: Retrieve Backend SHA
        run: |
          aws s3 cp s3://hazel-sha-bucket/sha.txt sha.txt
          echo "BACKEND_TAG=$(cat sha.txt)" >> $GITHUB_ENV

      # 7. Elastic Beanstalk에 사용할 Dockerrun.aws.json 파일을 생성합니다.
      - name: Generate Dockerrun.aws.json
        run: |
          cat <<EOF > Dockerrun.aws.json
          {
            "AWSEBDockerrunVersion": "2",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "${{ secrets.ECR_BACKEND_URI }}:${{ env.BACKEND_TAG }}",
                "essential": true,
                "memory": 512,
                "portMappings": [
                  {
                    "hostPort": 81,
                    "containerPort": 3000
                  }
                ]
              },
              {
                "name": "frontend",
                "image": "${{ secrets.ECR_FRONTEND_URI }}:${{ github.sha }}",
                "essential": true,
                "memory": 256,
                "portMappings": [
                  {
                    "hostPort": 3000,
                    "containerPort": 80
                  }
                ]
              }
            ]
          }
          EOF

      - name: Set Commit Message as Environment Variable
        run: |
          # 메시지에서 특수 문자를 이스케이프 처리
          SAFE_COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | tr -cd '[:alnum:][:space:]:#-')
          echo "GITHUB_HEAD_COMMIT_MESSAGE=$SAFE_COMMIT_MESSAGE" >> $GITHUB_ENV

      # 8. Elastic Beanstalk에 배포 작업을 실행
      - name: Deploy to Elastic Beanstalk
        run: |
          # 메시지에서 숫자를 추출
          COMMIT_MESSAGE=$(echo "$GITHUB_HEAD_COMMIT_MESSAGE" | grep -oE 'Merge pull request #[0-9]+')
                      
          # "Merge pull request #숫자" 패턴이 없을 경우 기본 커밋 메시지를 사용
          if [ -z "$COMMIT_MESSAGE" ]; then
            COMMIT_MESSAGE=$(echo "$GITHUB_HEAD_COMMIT_MESSAGE" | cut -c1-20 || echo "default-message")
          fi
                      
          COMMIT_SHA="${GITHUB_SHA:0:8}"
          VERSION_LABEL="${COMMIT_MESSAGE}-${COMMIT_SHA}"
          echo "Using VERSION_LABEL: $VERSION_LABEL"
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV

          # Dockerrun.aws.json 압축
          zip deploy.zip Dockerrun.aws.json

          # S3에 업로드
          aws s3 cp deploy.zip s3://elasticbeanstalk-ap-northeast-2-020557303774/deploy.zip

          # 애플리케이션 버전 생성
          aws elasticbeanstalk create-application-version \
            --application-name "community-v2" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="elasticbeanstalk-ap-northeast-2-020557303774",S3Key="deploy.zip"
      # 9.1 Green 환경의 현재 버전 기록
      - name: Retrieve Current Green Version
        id: green-version
        run: |
          CURRENT_GREEN_VERSION=$(aws elasticbeanstalk describe-environments \
            --application-name "community-v2" \
            --environment-names "green-v2-env" \
            --query "Environments[0].VersionLabel" --output text)
          echo "CURRENT_GREEN_VERSION=$CURRENT_GREEN_VERSION" >> $GITHUB_ENV
          echo "Current Green Version: $CURRENT_GREEN_VERSION"

      # 9.2 Green 환경 업데이트
      - name: Update Green Environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name "community-v2" \
            --environment-name "green-v2-env" \
            --version-label "${{ env.VERSION_LABEL }}"

      # 9.3 Green 환경이 준비될 때까지 대기
      - name: Wait for Green Environment to be Ready
        run: |
          aws elasticbeanstalk wait environment-updated \
            --application-name "community-v2" \
            --environment-names "green-v2-env"

      # 9.4 Blue 환경에 이전 Green 버전 배포
      - name: Deploy Previous Green Version to Blue Environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name "community-v2" \
            --environment-name "blue-v2-env" \
            --version-label "${{ env.CURRENT_GREEN_VERSION }}"

      # 9.5 Blue 환경이 준비될 때까지 대기
      - name: Wait for Blue Environment to be Ready
        run: |
          aws elasticbeanstalk wait environment-updated \
            --application-name "community-v2" \
            --environment-names "blue-v2-env"

      # 10. Blue-Green 환경 간 트래픽 스왑을 실행합니다.
      - name: Swap Blue-Green Environments
        run: |
          aws elasticbeanstalk swap-environment-cnames \
            --source-environment-name "green-v2-env" \
            --destination-environment-name "blue-v2-env"
